/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author Dina Helmi
 */
public class pendingOrder extends javax.swing.JFrame {
     Connection c = null;
     Statement stmt = null;
     String s;
     int y=20;
     static ArrayList<retrieveOrder> arr = new ArrayList<retrieveOrder>();
     JCheckBox lab;
     
    /**
     * Creates new form pendingOrder
     */
    public pendingOrder() throws ClassNotFoundException{
        initComponents();
        try{
              retrieveConOrd();
          } catch (SQLException ex) {
             Logger.getLogger(pendingOrder.class.getName()).log(Level.SEVERE, null, ex);
         }
        
              s="";
              for(int i=0;i<arr.size();i++){
                  s= arr.get(i).toString();
                  lab =  new JCheckBox();
                  lab.setSize(300, 50);
                  lab.setLocation(50,y);
                  lab.setText(s);
                 textarea.add(lab);
                 textarea.validate(); 
                 y+=20;
              }
              
    }
            
    
    public void retrieveConOrd() throws ClassNotFoundException, SQLException{   
        try {
	Class.forName("org.postgresql.Driver");
	c = DriverManager.getConnection(
			"jdbc:postgresql://localhost:5432/postgres",
			"postgres","tinytots");
	System.out.println("Connected to the database");
} catch (Exception  e) {
	e.printStackTrace();
}
        String query = "SELECT * FROM ORDER_CONF";
        try {
           Class.forName("org.postgresql.Driver");
	   c = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres",
			"postgres","tinytots");

                PreparedStatement pstmt = c.prepareStatement(query);
                            
                ResultSet rs = pstmt.executeQuery();
                while(rs.next()) {
                    arr.add(new retrieveOrder(rs.getString("orderno"),rs.getString("total"), rs.getString("username")));
                }
                c.close();
            } catch (SQLException e) {
            System.out.println("Connection Failed! Check output console");
            e.printStackTrace();
        }
    
     
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        textarea = new javax.swing.JPanel();
        conforder = new javax.swing.JButton();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textarea.setBackground(new java.awt.Color(255, 255, 255));

        conforder.setBackground(new java.awt.Color(0, 153, 255));
        conforder.setForeground(new java.awt.Color(255, 255, 255));
        conforder.setText("Confirm Order");
        conforder.setBorderPainted(false);
        conforder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conforderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout textareaLayout = new javax.swing.GroupLayout(textarea);
        textarea.setLayout(textareaLayout);
        textareaLayout.setHorizontalGroup(
            textareaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textareaLayout.createSequentialGroup()
                .addContainerGap(594, Short.MAX_VALUE)
                .addComponent(conforder, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        textareaLayout.setVerticalGroup(
            textareaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, textareaLayout.createSequentialGroup()
                .addContainerGap(322, Short.MAX_VALUE)
                .addComponent(conforder, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(textarea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(textarea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void conforderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conforderActionPerformed
    if(lab.isSelected()){
        JOptionPane.showMessageDialog(null, "Order confirmed");
        lab.setForeground(Color.green);
    }
    }//GEN-LAST:event_conforderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(pendingOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(pendingOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(pendingOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(pendingOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                try {
                    new pendingOrder().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(pendingOrder.class.getName()).log(Level.SEVERE, null, ex);
                }
        
            }
         });
                }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton conforder;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JPanel textarea;
    // End of variables declaration//GEN-END:variables
}
